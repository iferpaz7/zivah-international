// This is your Prisma schema file.
// Learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(100)
  slug        String    @unique @db.VarChar(100)
  description String?   @db.Text
  icon        String?   @db.VarChar(50)
  color       String?   @db.VarChar(7)
  sortOrder   Int       @default(0) @map("sort_order")
  isActive    Boolean   @default(true) @map("is_active")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  products    Product[]

  @@map("categories")
  @@index([isActive, sortOrder])
}

model Product {
  id              Int         @id @default(autoincrement())
  name            String      @db.VarChar(255)
  slug            String      @unique @db.VarChar(255)
  categoryId      Int?        @map("category_id")
  description     String?     @db.Text
  shortDescription String?    @db.VarChar(500) @map("short_description")
  sku             String?     @unique @db.VarChar(100)
  specifications  Json?
  basePrice       Decimal?    @db.Decimal(10, 2) @map("base_price")
  priceUnit       String?     @db.VarChar(20) @map("price_unit")
  stockQuantity   Int         @default(0) @map("stock_quantity")
  minOrderQty     Int?        @default(1) @map("min_order_qty")
  imageUrl        String?     @db.VarChar(500) @map("image_url")
  imageGallery    Json?       @map("image_gallery")
  origin          String      @default("Ecuador") @db.VarChar(100)
  harvestSeason   String?     @db.VarChar(100) @map("harvest_season")
  certifications  Json?
  nutritionalInfo Json?       @map("nutritional_info")
  isActive        Boolean     @default(true) @map("is_active")
  isFeatured      Boolean     @default(false) @map("is_featured")
  seoTitle        String?     @db.VarChar(255) @map("seo_title")
  seoDescription  String?     @db.VarChar(500) @map("seo_description")
  createdAt       DateTime    @default(now()) @map("created_at")
  updatedAt       DateTime    @updatedAt @map("updated_at")

  category        Category?   @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  variants        ProductVariant[]
  quoteItems      QuoteItem[]

  @@map("products")
  @@index([categoryId])
  @@index([isActive, isFeatured])
  @@index([slug])
}

model ProductVariant {
  id          Int       @id @default(autoincrement())
  productId   Int       @map("product_id")
  name        String    @db.VarChar(255)
  sku         String?   @unique @db.VarChar(50)
  price       Decimal?  @db.Decimal(10, 2)
  stockQty    Int       @default(0) @map("stock_qty")
  isActive    Boolean   @default(true) @map("is_active")
  attributes  Json?
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_variants")
  @@index([productId])
}

enum QuoteStatus {
  PENDING
  REVIEWED
  QUOTED
  APPROVED
  REJECTED
  EXPIRED
}

enum QuotePriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

model Quote {
  id              Int           @id @default(autoincrement())
  quoteNumber     String        @unique @db.VarChar(20) @map("quote_number")
  customerName    String        @db.VarChar(255) @map("customer_name")
  customerEmail   String        @db.VarChar(255) @map("customer_email")
  customerPhone   String?       @db.VarChar(50) @map("customer_phone")
  company         String?       @db.VarChar(255)
  country         String?       @db.VarChar(100)
  shippingAddress Json?         @map("shipping_address")
  message         String?       @db.Text
  status          QuoteStatus   @default(PENDING)
  priority        QuotePriority @default(NORMAL)
  totalAmount     Decimal?      @db.Decimal(12, 2) @map("total_amount")
  currency        String        @default("USD") @db.VarChar(3)
  validUntil      DateTime?     @map("valid_until")
  adminNotes      String?       @db.Text @map("admin_notes")
  internalNotes   String?       @db.Text @map("internal_notes")
  userId          Int?          @map("user_id")
  assignedToId    Int?          @map("assigned_to_id")
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")

  user            User?         @relation("QuoteUser", fields: [userId], references: [id], onDelete: SetNull)
  assignedTo      User?         @relation("QuoteAssignee", fields: [assignedToId], references: [id], onDelete: SetNull)
  items           QuoteItem[]
  communications  QuoteCommunication[]

  @@map("quotes")
  @@index([status, priority])
  @@index([customerEmail])
  @@index([createdAt])
}

model QuoteItem {
  id             Int      @id @default(autoincrement())
  quoteId        Int      @map("quote_id")
  productId      Int      @map("product_id")
  quantity       Int
  unitPrice      Decimal  @db.Decimal(10, 2) @map("unit_price")
  totalPrice     Decimal  @db.Decimal(12, 2) @map("total_price")
  notes          String?  @db.Text
  specifications Json?
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  quote   Quote   @relation(fields: [quoteId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("quote_items")
  @@index([quoteId])
  @@index([productId])
}

enum CommunicationType {
  NOTE
  EMAIL
  PHONE_CALL
  MEETING
  DOCUMENT
}

model QuoteCommunication {
  id          Int               @id @default(autoincrement())
  quoteId     Int               @map("quote_id")
  userId      Int?              @map("user_id")
  type        CommunicationType @default(NOTE)
  subject     String?           @db.VarChar(255)
  message     String            @db.Text
  attachments Json?
  isInternal  Boolean           @default(false) @map("is_internal")
  createdAt   DateTime          @default(now()) @map("created_at")

  quote Quote @relation(fields: [quoteId], references: [id], onDelete: Cascade)
  user  User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("quote_communications")
  @@index([quoteId])
  @@index([createdAt])
}

enum UserRole {
  ADMIN
  SALES_MANAGER
  SALES_REP
  CUSTOMER_SERVICE
  VIEWER
}

model User {
  id          Int       @id @default(autoincrement())
  username    String    @unique @db.VarChar(50)
  email       String    @unique @db.VarChar(255)
  password    String    @db.VarChar(255)
  name        String?   @db.VarChar(255) @map("full_name")
  role        UserRole  @default(VIEWER)
  isActive    Boolean   @default(true) @map("is_active")
  lastLogin   DateTime? @map("last_login")
  loginCount  Int       @default(0) @map("login_count")
  avatar      String?   @db.VarChar(500)
  phone       String?   @db.VarChar(50)
  department  String?   @db.VarChar(100)
  company     String?   @db.VarChar(255)
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  quotesCreated    Quote[] @relation("QuoteUser")
  quotesAssigned   Quote[] @relation("QuoteAssignee")
  communications   QuoteCommunication[]
  activityLogs     ActivityLog[]

  @@map("users")
  @@index([email])
  @@index([role])
  @@index([isActive])
}

enum SettingType {
  TEXT
  NUMBER
  BOOLEAN
  JSON
  FILE
}

model SiteSetting {
  id              Int         @id @default(autoincrement())
  key             String      @unique @db.VarChar(100) @map("setting_key")
  value           String?     @db.Text @map("setting_value")
  type            SettingType @default(TEXT) @map("setting_type")
  category        String?     @db.VarChar(50)
  description     String?     @db.Text
  isPublic        Boolean     @default(false) @map("is_public")
  validationRules Json?       @map("validation_rules")
  createdAt       DateTime    @default(now()) @map("created_at")
  updatedAt       DateTime    @updatedAt @map("updated_at")
  updatedBy       Int?        @map("updated_by")

  @@map("site_settings")
  @@index([category])
  @@index([isPublic])
}

model Page {
  id              Int         @id @default(autoincrement())
  title           String      @db.VarChar(255)
  slug            String      @unique @db.VarChar(255)
  content         String      @db.Text
  excerpt         String?     @db.VarChar(500)
  metaTitle       String?     @db.VarChar(255) @map("meta_title")
  metaDescription String?     @db.VarChar(500) @map("meta_description")
  language        String      @default("es") @db.VarChar(2)
  isPublished     Boolean     @default(false) @map("is_published")
  publishedAt     DateTime?   @map("published_at")
  template        String?     @db.VarChar(50)
  featuredImage   String?     @db.VarChar(500) @map("featured_image")
  sortOrder       Int         @default(0) @map("sort_order")
  createdAt       DateTime    @default(now()) @map("created_at")
  updatedAt       DateTime    @updatedAt @map("updated_at")

  @@map("pages")
  @@index([slug])
  @@index([language])
  @@index([isPublished])
}

model ActivityLog {
  id          Int      @id @default(autoincrement())
  userId      Int?     @map("user_id")
  action      String   @db.VarChar(100)
  entityType  String?  @db.VarChar(50) @map("entity_type")
  entityId    Int?     @map("entity_id")
  details     Json?
  oldValues   Json?    @map("old_values")
  newValues   Json?    @map("new_values")
  ipAddress   String?  @db.VarChar(45) @map("ip_address")
  userAgent   String?  @db.Text @map("user_agent")
  createdAt   DateTime @default(now()) @map("created_at")

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("activity_logs")
  @@index([userId])
  @@index([entityType, entityId])
  @@index([createdAt])
}

model ContactSubmission {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(255)
  email       String   @db.VarChar(255)
  phone       String?  @db.VarChar(50)
  company     String?  @db.VarChar(255)
  country     String?  @db.VarChar(100)
  subject     String?  @db.VarChar(255)
  message     String   @db.Text
  type        String   @default("general") @db.VarChar(50)
  source      String?  @db.VarChar(50)
  status      String   @default("new") @db.VarChar(20)
  priority    String   @default("normal") @db.VarChar(10)
  assignedTo  Int?     @map("assigned_to")
  notes       String?  @db.Text
  ipAddress   String?  @db.VarChar(45) @map("ip_address")
  userAgent   String?  @db.Text @map("user_agent")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("contact_submissions")
  @@index([email])
  @@index([status])
  @@index([type])
  @@index([createdAt])
}

model Newsletter {
  id          Int      @id @default(autoincrement())
  email       String   @unique @db.VarChar(255)
  name        String?  @db.VarChar(255)
  language    String   @default("es") @db.VarChar(2)
  interests   Json?
  isActive    Boolean  @default(true) @map("is_active")
  confirmedAt DateTime? @map("confirmed_at")
  unsubscribedAt DateTime? @map("unsubscribed_at")
  source      String?  @db.VarChar(50)
  ipAddress   String?  @db.VarChar(45) @map("ip_address")
  preferences Json?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("newsletter_subscriptions")
  @@index([isActive])
  @@index([language])
}
